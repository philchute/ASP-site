@page
@model ASP_site.Pages.Servers.IndexModel
@using ASP_site.Models.ServerBrowser

@{ ViewData["Title"] = "Servers"; }

<div class="container">
    <h1 class="my-4">Game Server Browser</h1>
    <p>
        This was adapted from <a href="https://github.com/BerntA/GameServerBrowser/" target="_blank">https://github.com/BerntA/GameServerBrowser/</a>
        which was not being hosted. I also implemented the blacklist from <a href="https://github.com/Ch0wW/goldsrc-fake-servers-firewall" target="_blank">https://github.com/Ch0wW/goldsrc-fake-servers-firewall</a> 
        to prevent some of the fake servers from being shown. This is still not a good browser for popular titles; I made this page to supplement the other tools that are available. 
        <a href="https://www.gametracker.com/search/cs/">gametracker.com</a> is a better interface for CS 1.6 and some popular titles but I can add any arbitrary third-party mod here. 
        <a href="https://cs2browser.com/">cs2browser.com</a> is a better interface for browsing CS2 servers, and includes additional filters for game modes. 
        I'm adding in some former GameSpy titles now, using the <a href="https://master.333networks.com/">333Networks replacement master servers</a>.
    </p>

    <form method="get">
        <div class="row g-3 align-items-end mb-3">
            <div class="col-md-4">
                <label asp-for="SelectedGameIndex" class="form-label">Game:</label>
                @{
                    var gameCount = Model.GamesList?.Count() ?? 0;
                    var selectGameText = $"-- Select a Game ({gameCount} available) --";
                    if (gameCount == 0 && Model.SelectedGameIndex == null && !Model.IsLoading) { // If no games at all, and nothing selected or loading
                        selectGameText = "-- No games available for browser --";
                    } else if (gameCount == 0 && Model.SelectedGameIndex != null) { // If a game *was* selected but list is now 0 (unlikely scenario)
                         selectGameText = "-- Select a Game --"; // Fallback
                    }
                }
                <select name="SelectedGameIndex" class="form-select" asp-for="SelectedGameIndex" asp-items="@(new SelectList((Model.GamesList ?? new List<Game>()).Select((game, index) => new { Index = index, Name = game.Name }), "Index", "Name"))" onchange="this.form.submit();">
                    <option value="">@selectGameText</option>
                </select>
            </div>

            <div class="col-md-2">
                <label asp-for="SortBy" class="form-label">Sort By:</label>
                <select asp-for="SortBy" class="form-select" onchange="this.form.submit();">
                    <option value="players">Players</option>
                    <option value="name">Name</option>
                    <option value="map">Map</option>
                </select>
            </div>

             <div class="col-md-2">
                <label asp-for="VacFilter" class="form-label">VAC:</label>
                <select asp-for="VacFilter" class="form-select" onchange="this.form.submit();">
                    <option value="all">All</option>
                    <option value="yes">Yes</option>
                    <option value="no">No</option>
                </select>
            </div>

             <div class="col-md-2">
                <label asp-for="PasswordFilter" class="form-label">Password:</label>
                <select asp-for="PasswordFilter" class="form-select" onchange="this.form.submit();">
                    <option value="all">All</option>
                    <option value="yes">Yes</option>
                    <option value="no">No</option>
                </select>
            </div>

             <div class="col-md-2">
                <label asp-for="PopulationFilter" class="form-label">Population:</label>
                <select asp-for="PopulationFilter" class="form-select" onchange="this.form.submit();">
                    <option value="all">Show All</option>
                    <option value="hide_empty">Hide Empty</option>
                    <option value="hide_full">Hide Full</option>
                </select>
            </div>

        </div>
    </form>

    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @Model.ErrorMessage
        </div>
    }

    @if (Model.IsLoading)
    {
        <div class="d-flex justify-content-center my-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <span class="ms-2">Loading server list for @Model.SelectedGame?.Name...</span>
        </div>
    }
    else if (Model.SelectedGame != null && Model.ServerList != null)
    {
        <h2 class="my-4">Servers for @Model.SelectedGame.Name (@Model.ServerList.Count found)</h2>

        @if (!Model.ServerList.Any())
        {
            <p>No servers found for this game at the moment.</p>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-striped table-hover table-sm site-table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Map</th>
                            <th>Players</th>
                            <th class="text-center">OS</th>
                            <th class="text-center">Type</th>
                            <th class="text-center">VAC</th>
                            <th class="text-center">PW</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var server in Model.ServerList)
                        {
                            var ipPort = $"{server.Address}:{server.Port}";
                            var connectString = $"connect {ipPort}";
                            <tr class="server-row" title="@ipPort (click to copy)" data-ip-port="@ipPort" style="cursor: pointer;">
                                <td>@server.Name</td>
                                <td>@server.Map</td>
                                <td>@server.PlayersStr</td>
                                <td class="text-center">
                                    @switch (server.Environment)
                                    {
                                        case ASP_site.Models.ServerBrowser.Environment.Linux:
                                            <span title="Linux">L</span>
                                            break;
                                        case ASP_site.Models.ServerBrowser.Environment.Windows:
                                            <span title="Windows">W</span>
                                            break;
                                        case ASP_site.Models.ServerBrowser.Environment.Mac:
                                            <span title="Mac">M</span>
                                            break;
                                        default:
                                            <span title="Unknown OS">?</span>
                                            break;
                                    }
                                </td>
                                <td class="text-center">
                                     @switch (server.ServerType)
                                    {
                                        case ASP_site.Models.ServerBrowser.ServerType.Dedicated:
                                            <span title="Dedicated">D</span>
                                            break;
                                        case ASP_site.Models.ServerBrowser.ServerType.Listen:
                                            <span title="Listen">L</span>
                                            break;
                                        case ASP_site.Models.ServerBrowser.ServerType.SourceTV:
                                             <span title="SourceTV Proxy">P</span>
                                            break;
                                        default:
                                            <span title="Unknown type">?</span>
                                            break;
                                    }
                                </td>
                                <td class="text-center">
                                    @switch (server.RequiresVAC)
                                    {
                                        case true:
                                            <span title="VAC Secured">Y</span>
                                            break;
                                        case false:
                                            <span title="Not VAC Secured">N</span>
                                            break;
                                        default:
                                            <span title="Unknown status">?</span>
                                            break;
                                    }
                                </td>
                                <td class="text-center">
                                    @switch (server.PasswordProtected)
                                    {
                                        case true:
                                            <span title="Password Protected">Y</span>
                                            break;
                                        case false:
                                            <span title="No Password">N</span>
                                            break;
                                        default:
                                            <span title="Unknown status">?</span>
                                            break;
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    }
    else if (Model.SelectedGameIndex != null && !Model.IsLoading)
    {
         <p>Select a game from the list above to view its servers.</p>
    }

</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const rows = document.querySelectorAll('.server-row');
            rows.forEach(row => {
                row.addEventListener('click', function () {
                    const ipPortToCopy = this.dataset.ipPort;
                    const commandToCopy = `connect ${ipPortToCopy}`;
                    if (commandToCopy) {
                        navigator.clipboard.writeText(commandToCopy).then(() => {
                            console.log('Copied command:', commandToCopy);
                            this.classList.add('copied-feedback');
                            setTimeout(() => { this.classList.remove('copied-feedback'); }, 500);
                        }).catch(err => {
                            console.error('Failed to copy command:', err);
                            alert('Failed to copy connect command.');
                        });
                    }
                });
            });
        });
    </script>
    <style>
        .server-row.copied-feedback td {
             /* Example subtle feedback */
            background-color: #e0ffe0 !important; 
            transition: background-color 0.1s ease-in-out;
        }
    </style>
}

@* Include Bootstrap Icons CSS if not already included globally *@
@* <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css"> *@